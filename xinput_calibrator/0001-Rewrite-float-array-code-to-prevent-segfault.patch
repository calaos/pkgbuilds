From 19c4a9c48b7d012f9a4b231cdc8eecf15d926cc4 Mon Sep 17 00:00:00 2001
From: Raoul Hecky <raoul.hecky@gmail.com>
Date: Fri, 26 Jan 2018 11:47:20 +0100
Subject: [PATCH 1/2] Rewrite float array code to prevent segfault

Current code does crash with:
*** Error in `xinput_calibrator': free(): invalid next size (fast):
0x00000000006359f0 ***
on some platforms.
---
 src/calibrator/Matrix.cpp | 30 ++++++++++++++++--------------
 1 file changed, 16 insertions(+), 14 deletions(-)

diff --git a/src/calibrator/Matrix.cpp b/src/calibrator/Matrix.cpp
index 1b5b0ea..d8a7d05 100644
--- a/src/calibrator/Matrix.cpp
+++ b/src/calibrator/Matrix.cpp
@@ -335,15 +335,10 @@ bool CalibratorMatrix::xinput_do_set_float_prop( const char * name,
 	#else
 	
 	Atom          prop;
-	int           i;
+	int           i, j;
 	
-	union {
-		unsigned char *c;
-		long *l;
-		float *f;
-	} data;
 	Atom float_atom = XInternAtom(display, "FLOAT", True);
-	
+
 	if (argc < 1)
 	{
 		fprintf(stderr, "Wrong usage of xinput_do_set_prop, need at least 1 arguments\n");
@@ -355,16 +350,23 @@ bool CalibratorMatrix::xinput_do_set_float_prop( const char * name,
 		fprintf(stderr, "invalid property %s\n", name);
 		return false;
 	}
-	
-	data.c = (unsigned char*)calloc(argc, sizeof(float));
-	
-	for (i = 0; i < argc; i++) {
-		*(float *)(data.l + i) = argv[i];
+
+	//Xlib needs the floats long-aligned
+	int sz = argc * (sizeof(long) == 8? 2 : 1);
+	float *data = new float[sz];
+	
+	for (i = 0, j = 0; i < argc; i++) {
+		data[j] = argv[i];
+		if (sizeof(long) == 4) j++;
+		else {
+			data[j + 1] = 0;
+			j += 2;
+		}
 	}
 	
 	XChangeDeviceProperty(display, dev, prop, float_atom, 32, PropModeReplace,
-			      data.c, argc);
-	free(data.c);
+			      (const unsigned char *)data, argc);
+	delete[] data;
 	XSync(display, False);
 	return true;
 	#endif // HAVE_XI_PROP
-- 
2.9.3

